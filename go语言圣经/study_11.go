package main
/*
	第十一章　测试

	Go语言的测试技术是相对低级的
	它依赖一个go test测试命令和一组按照约定方式编写的测试函数，测试命令可以运行这些测试函数
	编写相对轻量级的纯测试代码是有效的，而且它很容易延伸到基准测试和示例文档
*/


//一，go test
//1.go test命令是一个按照一定的约定和组织来测试代码的程序
//2.有三种类型的函数：测试函数、基准测试(benchmark)函数、示例函数
//3.go test命令会遍历所有的*_test.go文件中符合上述命名规则的函数

//二，测试函数
//1.每个测试函数必须导入testing包
//2.测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头， func TestSin(t *testing.T) { /* ... */ }
//3.go test命令如果没有参数指定包那么将默认采用当前目录对应的包
//4.参数-run对应一个正则表达式，只有测试函数名被它正确匹配的测试函数才会被go test测试命令运行
//5.参数-v可用于打印每个测试函数的名字和运行时间
//6.调用log.Fatal或os.Exit这些函数的特权应该放在main函数中
//7.用go list命令查看包对应目录中哪些Go源文件是产品代码，哪些是包内测试，还有哪些是外部测试包
func test_testFunc()  {

}


//三，测试覆盖率
//1.go tool命令运行Go工具链的底层可执行程序
//2.-coverprofile标志参数，将待测代码拷贝一份并做修改，在每个词法块都会设置一个布尔标志变量
//3.-covermode=count标志参数，将在每个代码块插入一个计数器而不是布尔标志量

func main() {
	
}
